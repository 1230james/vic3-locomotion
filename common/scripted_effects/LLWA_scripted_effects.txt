@LOGIHUB_CONN_OUTPUT_PER_TRANSPORTATION = 1 # Match with LogiHub base PM
@LOGIHUB_CONN_COST = 30 # Match with goods definition

# Profit ceiling = abs(weekly expenses) * (1 + BUILDING_PROFIT_TARGET_TO_RAISE_WAGES) + @LOGIHUB_PROFIT_CEIL_BUFFER
# If weekly profit is above the profit ceiling, output will be nudged downwards to reach the profit target
@LOGIHUB_PROFIT_CEIL_BUFFER = 2000

# Profit floor = abs(weekly expenses) * (1 + BUILDING_PROFIT_TARGET_TO_LOWER_WAGES)
# Profit target = ((profit ceiling) - (profit floor)) * @LOGIHUB_PROFIT_TARGET_RATIO + (profit floor)
# i.e. 0.5 = midway between profit ceiling and floor
@LOGIHUB_PROFIT_TARGET_RATIO = 0.5

@LOGIHUB_MKT_CONN_WAGES_OUT_MIN = 1 # At least/at most these amounts will be created to account for wages
@LOGIHUB_MKT_CONN_WAGES_OUT_MAX = 1000

# The additional Market Connectivity created to cover wages can only change by this proportion of the current amount at a time
@LOGIHUB_MKT_CONN_WAGES_MAX_DELTA_RATIO = 0.75

# Update autonomous investment availability on PM change
# Building scope
LLWA_se_manage_private_expansion = {
    if = {
        limit = {
            OR = {
                is_building_type = LLWA_building_roadway
                is_building_type = building_railway
                is_building_type = LLWA_building_waterway
                is_building_type = LLWA_building_airway
                is_building_type = llwa_building_freight_depot
                is_building_type = llwa_building_exchange
            }
        }
        
        # Set/unset private investment allowance
        if = {
            limit = {
                has_active_production_method = LLWA_pm_no_private_expansion
            }
            state = {
                unset_available_for_autonomous_investment = prev.type
            }
        }
        else = {
            state = {
                set_available_for_autonomous_investment = prev.type
            }
        }
    }
}

# Reenable autonomous investment if related building is missing (e.g. from destruction)
# State scope
LLWA_se_reset_blocked_private_expansions = {
    if = {
        limit = {
            NOT = {
                has_building = LLWA_building_roadway
            }
        }
        set_available_for_autonomous_investment = bt:LLWA_building_roadway
    }
    if = {
        limit = {
            NOT = {
                has_building = building_railway
            }
        }
        set_available_for_autonomous_investment = bt:building_railway
    }
    if = {
        limit = {
            NOT = {
                has_building = LLWA_building_waterway
            }
        }
        set_available_for_autonomous_investment = bt:LLWA_building_waterway
    }
    if = {
        limit = {
            NOT = {
                has_building = LLWA_building_airway
            }
        }
        set_available_for_autonomous_investment = bt:LLWA_building_airway
    }
    if = {
        limit = {
            NOT = {
                has_building = llwa_building_freight_depot
            }
        }
        set_available_for_autonomous_investment = bt:llwa_building_freight_depot
    }
    if = {
        limit = {
            NOT = {
                has_building = llwa_building_exchange
            }
        }
        set_available_for_autonomous_investment = bt:llwa_building_exchange
    }
}

# Update logistics hub modifiers
# Country scope
LLWA_se_country_refresh_logihubs = {
    every_scope_state = {
        LLWA_se_state_refresh_logihubs = yes
    }
}
# State scope
LLWA_se_state_refresh_logihubs = {
    # Handle building existence
    if = {
        limit = {
            has_game_rule = LLWA_grs_infra_mode_yes
            infrastructure_usage >= 1
            NOT = {
                has_building = LLWA_building_logistics_hub
            }
        }
        create_building = {
            building = LLWA_building_logistics_hub
            level    = 1
        }
    }
    else_if = {
        limit = {
            has_game_rule = LLWA_grs_infra_mode_yes
            infrastructure_usage >= 1
            state_has_building_type_levels = {
                target = bt:LLWA_building_logistics_hub
                value  > 1
            }
        }
        remove_building = LLWA_building_logistics_hub
        create_building = {
            building = LLWA_building_logistics_hub
            level    = 1
        }
    }
    else_if = {
        limit = {
            OR = {
                has_game_rule = LLWA_grs_infra_mode_no
                infrastructure_usage < 1
            }
            has_building = LLWA_building_logistics_hub
        }
        remove_building = LLWA_building_logistics_hub
        remove_variable = LLWA_logihub_mkt_conn_wages_out
    }
    
    # Handle modifier
    if = {
        limit = {
            has_building = LLWA_building_logistics_hub
        }
        
        # Calculate additional market connectivity output to keep building solvent
        if = { # New building - init to default value
            limit = {
                NOT = {
                    has_variable = LLWA_logihub_mkt_conn_wages_out
                }
            }
            set_variable = {
                name  = LLWA_logihub_mkt_conn_wages_out
                value = {
                    add     = 2000
                    divide  = @LOGIHUB_CONN_COST
                    ceiling = yes
                }
            }
        }
        else = {
            # Pre-calculate things
            set_local_variable = {
                # (weekly profit) - (revenue) = expenses
                # Sign will be NEGATIVE
                name  = weekly_expenses
                value = {
                    add      = b:LLWA_building_logistics_hub.weekly_profit
                    subtract = {
                        add  = sg:llwa_logi_conn.state_goods_production
                        multiply = @LOGIHUB_CONN_COST
                    }
                }
            }
            set_local_variable = {
                # abs(weekly expenses) * (1 + BUILDING_PROFIT_TARGET_TO_RAISE_WAGES)
                name  = wage_raise_profit_target
                value = {
                    add      = local_var:weekly_expenses
                    multiply = { # raise wages margin & flip sign
                        add      = -1
                        subtract = define:NEconomy|BUILDING_PROFIT_TARGET_TO_RAISE_WAGES
                        subtract = 0.05 # +5% buffer
                    }
                }
            }
            set_local_variable = {
                name  = profit_ceiling
                value = {
                    add = local_var:wage_raise_profit_target
                    add = @LOGIHUB_PROFIT_CEIL_BUFFER
                }
            }
            set_local_variable = {
                name  = profit_floor
                value = {
                    add = local_var:weekly_expenses
                    multiply = { # lower wages margin & flip sign
                        add      = -1
                        subtract = define:NEconomy|BUILDING_PROFIT_TARGET_TO_LOWER_WAGES
                    }
                }
            }
            set_local_variable = {
                name  = profit_target
                value = {
                    add = local_var:profit_floor
                    add = {
                        add      = local_var:profit_ceiling
                        subtract = local_var:profit_floor
                        multiply = @LOGIHUB_PROFIT_TARGET_RATIO
                    }
                }
            }
            
            if = { # Hit wage raising target to hire up
                limit = {
                    b:LLWA_building_logistics_hub.occupancy < 0.90
                    OR = { # there are pops to hire (prevent spiking earnings in empty states)
                        pop_type_percent_state = {
                            target = pop_type:peasants
                            value > 0
                        }
                        state_unemployment_rate > 0
                    }
                }
                set_variable = {
                    name  = LLWA_logihub_mkt_conn_wages_out
                    value = {
                        add     = local_var:wage_raise_profit_target
                        divide  = @LOGIHUB_CONN_COST # convert value into units
                        divide  = { # scale up for low occupancy
                            add = b:LLWA_building_logistics_hub.occupancy
                            min = 0.0001 # DIV/0 guard
                        }
                        ceiling = yes
                        min     = {
                            add     = 2000
                            divide  = @LOGIHUB_CONN_COST
                            ceiling = yes
                        }
                        max = @LOGIHUB_MKT_CONN_WAGES_OUT_MAX
                    }
                }
            }
            else_if = { # Nudge up or down to stay solvent but minimize profits
                limit = {
                    b:LLWA_building_logistics_hub.weekly_profit < local_var:profit_floor
                }
                set_variable = {
                    name  = LLWA_logihub_mkt_conn_wages_out
                    value = {
                        add = var:LLWA_logihub_mkt_conn_wages_out
                        add = {
                            add      = local_var:profit_target
                            subtract = b:LLWA_building_logistics_hub.weekly_profit
                            divide   = @LOGIHUB_CONN_COST
                            max      = {
                                add      = var:LLWA_logihub_mkt_conn_wages_out
                                multiply = @LOGIHUB_MKT_CONN_WAGES_MAX_DELTA_RATIO
                            }
                        }
                        ceiling = yes
                        min     = @LOGIHUB_MKT_CONN_WAGES_OUT_MIN
                        max     = @LOGIHUB_MKT_CONN_WAGES_OUT_MAX
                    }
                }
            }
            else_if = {
                limit = {
                    b:LLWA_building_logistics_hub.weekly_profit > local_var:profit_ceiling
                }
                set_variable = {
                    name  = LLWA_logihub_mkt_conn_wages_out
                    value = {
                        add      = var:LLWA_logihub_mkt_conn_wages_out
                        subtract = {
                            add      = b:LLWA_building_logistics_hub.weekly_profit
                            subtract = local_var:profit_target
                            divide   = @LOGIHUB_CONN_COST
                            max      = {
                                add      = var:LLWA_logihub_mkt_conn_wages_out
                                multiply = @LOGIHUB_MKT_CONN_WAGES_MAX_DELTA_RATIO
                            }
                        }
                        ceiling = yes
                        min     = @LOGIHUB_MKT_CONN_WAGES_OUT_MIN
                        max     = @LOGIHUB_MKT_CONN_WAGES_OUT_MAX
                    }
                }
            }
        }
        
        # Apply modifiers to building
        set_local_variable = {
            name  = in_mult
            value = {
                add      = infrastructure_usage
                floor    = yes # Value is truncated by the time it reaches the state panel
                multiply = LLWA_INFRA_TRANSPORTATION_RATIO
            }
        }
        set_local_variable = {
            name  = out_mult
            value = {
                add      = @LOGIHUB_CONN_OUTPUT_PER_TRANSPORTATION
                multiply = local_var:in_mult
                add      = var:LLWA_logihub_mkt_conn_wages_out
                divide   = @LOGIHUB_CONN_OUTPUT_PER_TRANSPORTATION
            }
        }
        b:LLWA_building_logistics_hub = {
            remove_modifier  = LLWA_md_logihub_in_mult
            remove_modifier  = LLWA_md_logihub_out_mult
            add_modifier     = {
                name         = LLWA_md_logihub_in_mult
                multiplier   = {
                    add      = local_var:in_mult
                    subtract = 1
                    min      = 0
                }
            }
            add_modifier     = {
                name         = LLWA_md_logihub_out_mult
                multiplier   = {
                    add      = local_var:out_mult
                    subtract = 1
                    min      = 0
                }
            }
        }
    }
}
